//
//  PortfolioInteractor.swift
//  IOS-Investment-App
//
//  Created by enki corbin on 01/12/2020.
//  Copyright (c) 2020 enki corbin. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import Coinpaprika

final class PortfolioInteractor {
    var presenter: PortfolioPresenterInterface!
    
    var store = Storage()
    let iconApi = IconAPI()

}

// MARK: - Extensions -

extension PortfolioInteractor: PortfolioInteractorInterface {
    
    func getCryptoIcon(coinSymbol: String) -> UIImage? {
        
        return iconApi.getIcon(withSymbolName: coinSymbol)
    }
    
    func getBoughtCoinsInfosFromApi(storeCoins: @escaping (_ coins: [CoinBoughtEntity]) -> Void) {
        var coinsBought = store.getBoughtCoins()
        
        if coinsBought.count == 0 {
            storeCoins(coinsBought)
        }
                
        for i in 0..<coinsBought.count {
            Coinpaprika.API.ticker(id: coinsBought[i].id, quotes: [.usd]).perform { (response) in
                switch response {
                  case .success(let ticker):
                    let coinAmountValue = Float(truncating: (Decimal(coinsBought[i].usdAmount)) / ticker[.usd].price as NSNumber)
                    let coinDiff = coinAmountValue - coinsBought[i].amount
                    let coinDiffUsd = coinDiff * Float(truncating: 1 / ticker[.usd].price as NSNumber)
                    
                    coinsBought[i].symbol = ticker.symbol
                    coinsBought[i].profits = coinDiffUsd
                    
                    // Tmp update the view each time we get a new coin infos
                    storeCoins(coinsBought)
                    case .failure(_):
                    break
                }
            }
        }
    }
    
    func getTransactions() {
        let transactions = store.getTransations()
        
        presenter.didGetTransactions(transactions: transactions)
    }
    
    func storeMoneyWallet(add amount: Int) {
        store.addMoneyToWallet(amount: amount)
        
        presenter.storeMoneyWalletCallback(success: true, walletBalance: store.getMoneyFromWallet())
    }
    
    func getMoneyWallet() -> Int {
        return store.getMoneyFromWallet()
    }
    
}
