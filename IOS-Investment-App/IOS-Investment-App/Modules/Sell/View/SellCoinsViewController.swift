//
//  SellCoinsViewController.swift
//  IOS-Investment-App
//
//  Created by enki corbin on 19/12/2020.
//  Copyright (c) 2020 enki corbin. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import Coinpaprika
import Charts

final class SellCoinsViewController: UIViewController {

    // MARK: - Public properties -

    @IBOutlet weak var usdProfitsLabel: UILabel!
    @IBOutlet weak var usdAmountBoughtLabel: UILabel!
    @IBOutlet weak var coinTitleLabel: DesignableLabel!
    @IBOutlet weak var usdAmountLabel: UILabel!
    @IBOutlet weak var dateTimeStockValueSegment: UISegmentedControl!
    @IBOutlet weak var chartViewContainer: DesignableView!

    var presenter: SellCoinsPresenterInterface!
    
    weak var axisFormatDelegate: IAxisValueFormatter?
    var chartView: CandleChart!


    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        
        initChartView()
        
        presenter.getCoinBoughtInfos()
        presenter.getCoinInfos()
        let ohlcvFromDate = getOhlcvDateFromSegment()
        presenter.getCoinOhlcv(from: ohlcvFromDate)
        
        dateTimeStockValueSegment.addTarget(self, action: #selector(BuyCoinsViewController.segmentedControlValueChanged(_:)), for: .valueChanged)
    }
    
    func initChartView() {
        let frame = CGRect(x: 10, y: 60, width: chartViewContainer.frame.width - 30, height: chartViewContainer.frame.height - 70)

        chartView = CandleChart(frame: frame)
        chartViewContainer.addSubview(chartView)

        axisFormatDelegate = chartView
    }
    
    func getOhlcvDateFromSegment() -> Date {
        var date: Date = Date(timeIntervalSince1970: 0)
        
        switch dateTimeStockValueSegment.selectedSegmentIndex {
        case 0:
            date = (Calendar.current.date(byAdding: .hour, value: -1, to: Date())!)
        case 1:
            date = (Calendar.current.date(byAdding: .day, value: -1, to: Date()) ?? Date())
        case 2:
            date = (Calendar.current.date(byAdding: .weekday, value: -1, to: Date()) ?? Date())
        case 3:
            date = (Calendar.current.date(byAdding: .month, value: -1, to: Date()) ?? Date())
        default:
            break
        }
                
        return date
    }
    
    @objc func segmentedControlValueChanged(_ sender:UISegmentedControl!) {
        
        let ohlcvFromDate = getOhlcvDateFromSegment()
        presenter.getCoinOhlcv(from: ohlcvFromDate)

        switch dateTimeStockValueSegment.selectedSegmentIndex {
        case 0:
            chartView.selectedDate = .minute
        case 1:
            chartView.selectedDate = .hour
        case 2:
            chartView.selectedDate = .day
        case 3:
            chartView.selectedDate = .month
        case 4:
            chartView.selectedDate = .all
        default:
            chartView.selectedDate = .all
        }
    }
    
    @IBAction func sellClick(_ sender: Any) {
        presenter.sellCoin()
    }
    
}

// MARK: - Extensions -

extension SellCoinsViewController: SellCoinsViewInterface {

    func updateCoinView(coin: CoinBoughtEntity) {
        usdProfitsLabel.text = String(coin.profits!)
        usdAmountBoughtLabel.text = String(coin.usdAmount) + " $"
        usdProfitsLabel.text = String(format: "%.1f", coin.profits!) + " $"
        
        if coin.profits! <= -0.1 {
            usdProfitsLabel.textColor = .systemRed
        } else if coin.profits! >= 0.1 {
            usdProfitsLabel.textColor = .systemGreen
        } else {
            usdProfitsLabel.textColor = .systemGray
        }
    }
    
    func updateCoinView(coin: Ticker) {
        let floatPrice = Float(truncating: coin[.usd].price as NSNumber)

        coinTitleLabel.text = Bundle.main.localizedString(forKey: "priceOf", value: "Price of", table: "Localizable") + " " + coin.name
        usdAmountLabel.text = String(format: "%.2f", floatPrice) + " $"
    }
    
    func updateChartView(ohlcv: [Ohlcv]) {
        chartView.updateDataView(coinOhlcv: ohlcv, axisFormatDelegate: axisFormatDelegate!)
    }
    
    func sellCoinCallBack(success: Bool) {
        if success {
            presenter.popViewController()
        } else {
            Toast.show(message: "An error occured", controller: self, type: "danger", toastDuration: 2)
        }
    }
    
}
