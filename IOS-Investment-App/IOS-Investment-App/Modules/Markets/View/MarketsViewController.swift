//
//  MarketsViewController.swift
//  IOS-Investment-App
//
//  Created by enki corbin on 01/12/2020.
//  Copyright (c) 2020 enki corbin. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class MarketsViewController: UIViewController {

    // MARK: - Public properties -

    @IBOutlet weak var BuyTableView: UITableView!
    @IBOutlet weak var SellTableView: UITableView!
    var presenter: MarketsPresenterInterface!
    
    var coins: [CoinEntity] = []
    var boughtCoins: [CoinBoughtEntity] = []
    
    var loadingViewBuy: LoadingView?
    var loadingViewSell: LoadingView?

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()

        setupLoadingBuyView()
        setupLoadingSellView()
        
        BuyTableView.delegate = self
        BuyTableView.dataSource = self
        BuyTableView.accessibilityIdentifier = "Buy"
        
        SellTableView.delegate = self
        SellTableView.dataSource = self
        SellTableView.accessibilityIdentifier = "Sell"
        
        presenter.fetchCryptos()
        presenter.fetchBoughtCoins()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        if let selectedIndexPath = BuyTableView.indexPathForSelectedRow {
            BuyTableView.deselectRow(at: selectedIndexPath, animated: animated)
        }
    }
    
    func setupLoadingBuyView() {
        loadingViewBuy = LoadingView(parentViewFrame: BuyTableView.frame, navigationControllerHeight: (navigationController?.navigationBar.frame.height ?? 0))
        BuyTableView.addSubview(loadingViewBuy!)
        BuyTableView.separatorStyle = .none
        loadingViewBuy?.showIndicator()
    }
    
    func setupLoadingSellView() {
        loadingViewSell = LoadingView(parentViewFrame: SellTableView.frame, navigationControllerHeight: (navigationController?.navigationBar.frame.height ?? 0))
        SellTableView.addSubview(loadingViewSell!)
        SellTableView.separatorStyle = .none
        loadingViewSell?.showIndicator()
    }
}

// MARK: - Extensions -

extension MarketsViewController: MarketsViewInterface {

    func updateBoughtCoins(coins: [CoinBoughtEntity]) {
        self.boughtCoins = coins
        SellTableView.reloadData()

        loadingViewSell?.hideIndicator()
        
        if self.boughtCoins.count == 0 {
            let nothingToSellLabel = UILabel()
            
            nothingToSellLabel.text = "You have nothing to sell"
            nothingToSellLabel.textColor = .systemGray
            
            SellTableView.backgroundView = nothingToSellLabel
        } else {
            SellTableView.separatorStyle = .singleLine
            SellTableView.backgroundView = nil
        }
    }
    
    
    func updateCoins(coins: [CoinEntity]) {
        self.coins = coins
        BuyTableView.reloadData()
        
        BuyTableView.separatorStyle = .singleLine
        loadingViewBuy?.hideIndicator()
    }
    
}

extension MarketsViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if tableView.accessibilityIdentifier == "Buy" {
            guard let cell = tableView.cellForRow(at: indexPath) as? MarketsBuyTableViewCell else { return }
            
            presenter.didTapBuyCoin(with: cell.coinId)
        } else if tableView.accessibilityIdentifier == "Sell" {
            guard let cell = tableView.cellForRow(at: indexPath) as? MarketsSellTableViewCell else { return }
            
            presenter.didTapSellCoin(with: cell.coinId)
        }
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if tableView.accessibilityIdentifier == "Buy" {

            return coins.count
        } else if tableView.accessibilityIdentifier == "Sell" {

            return boughtCoins.count
        }
        
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if tableView.accessibilityIdentifier == "Buy" {
            let cell = tableView.dequeueReusableCell(withIdentifier: "MarketBuyCell", for: indexPath) as! MarketsBuyTableViewCell
            
            cell.cryptoIcon.image = UIImage(data: coins[indexPath.row].iconData ?? Data())
            cell.cryptoName.text = coins[indexPath.row].symbol ?? "NaN"
            cell.cryptoValue.text = String(format: "%.2f", coins[indexPath.row].usdPrice!) + " $"
            cell.coinId = coins[indexPath.row].id
            
            return cell
        } else if tableView.accessibilityIdentifier == "Sell"  {
            let cell = tableView.dequeueReusableCell(withIdentifier: "MarketSellCell", for: indexPath) as! MarketsSellTableViewCell
            
            cell.coinImage.image = UIImage(data: boughtCoins[indexPath.row].iconData ?? Data())
            cell.coinNameLabel.text = boughtCoins[indexPath.row].symbol
            cell.coinProfitsAmountLabel.text = String(format: "%.1f", boughtCoins[indexPath.row].profits ?? 0) + " $"

            if (boughtCoins[indexPath.row].profits ?? 0) <= -0.1 {
                cell.coinProfitsAmountLabel.textColor = .systemRed
            } else if (boughtCoins[indexPath.row].profits ?? 0) >= 0.1 {
                cell.coinProfitsAmountLabel.textColor = .systemGreen
            } else {
                cell.coinProfitsAmountLabel.textColor = .systemGray
            }

            cell.coinId = boughtCoins[indexPath.row].id

            return cell
        }
        
        return UITableViewCell()
    }
        
}


